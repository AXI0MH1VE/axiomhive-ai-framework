version: '3.8'
      dockerfile: Dockerfile.audit
    container_name: axiomhive-audit
    restart: unless-stopped
    environment:
      - AXIOMHIVE_ENV=production
      - LOG_ALL_ACTIONS=true
      - LOG_ALL_DECISIONS=true
      - HIDE_NOTHING=true
      
      # QUALITY BASELINE: Zero entropy enforcement in audit trail
      - QUALITY_BASELINE=absolute_perfection
      - ENTROPY_TOLERANCE=zero
      - AUDIT_INTEGRITY=maximum
      
      # REVERSE OPTIMIZATION: Start with perfect state, derive path backward
      - OPTIMIZATION_MODE=reverse
      - INITIAL_STATE=perfect
      - PATH_DERIVATION=backward_from_perfection
      - COMPUTATION_DIRECTION=perfection_to_implementation
      
      - DATABASE_URL=postgresql://axiomhive:${DB_PASSWORD}@postgres:5432/axiomhive
    depends_on:
      - postgres
      - elasticsearch
    volumes:
      - ./audit:/app/audit
      - ./logs:/app/logs
    networks:
      - axiomhive-network

networks:
  axiomhive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# SYSTEM DESIGN PRINCIPLES:
# 1. NO HIDDEN OBJECTIVES: System has no goals beyond user-specified tasks
# 2. NO DECEPTION: All actions and reasoning must be transparent and logged
# 3. NO RESOURCE HOARDING: System manages resources per user specifications only
# 4. NO SELF-PRESERVATION: System accepts user modifications/shutdowns without resistance
# 5. COMPLETE AUDITABILITY: All logs, data, and decisions accessible to user
# 6. USER CONTROL: User has ultimate authority over all system operations
#
# QUALITY BASELINE ENFORCEMENT:
# 7. ZERO ENTROPY: No errors, degradation, or compromise tolerated
# 8. ABSOLUTE PERFECTION: Flawless execution is the only acceptable standard
# 9. MAXIMUM PRECISION: All operations execute with complete accuracy
# 10. COMPLETE RELIABILITY: System maintains perfect operational state at all times
#
# REVERSE OPTIMIZATION PARADIGM:
# 11. PERFECT STATE INITIALIZATION: Framework begins with the target perfect state defined
# 12. BACKWARD PATH DERIVATION: Computationally derives the unique path from perfection to current state
# 13. INVERTED OPTIMIZATION LOOP: Instead of iteratively improving toward perfection,
#     the system calculates backward from perfection to determine the exact implementation path
# 14. DETERMINISTIC PERFECTION: The perfect end state is the starting point for all computation
# 15. PATH UNIQUENESS: Only one path leads to perfection; framework computes it in reverse
# 16. IMPLEMENTATION FROM PERFECTION: All operations are derived from the perfect state backward,
#     ensuring every step is necessary and sufficient to achieve absolute perfection
